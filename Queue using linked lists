#include <stdio.h>
#include <stdlib.h>

void enqueue(int);
void display();
void dequeue();
void peek();
void isEmpty();

struct node
{
    int data;
    struct node *link;
} *front, *rear = NULL;

void display()
{
    struct node *head = front;
    while (head != NULL)
    {
        printf("%d ", head->data);
        head = head->link;
    }
}

void enqueue(int value)
{
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = value;
    newNode->link = NULL;

    if (front == NULL && rear == NULL)
    {
        front = rear = newNode;
    }
    else
    {
        rear->link = newNode;
        rear = newNode;
    }
}

void dequeue()
{
    struct node *toDel = front;
    if (front == NULL && rear == NULL)
    {
        printf("The Queue is empty");
    }
    else
    {
        front = front->link;
        free(toDel);

        if (front == NULL)
        {
            rear = NULL;
        }
    }
}

void peek()
{
    if (front == NULL)
    {
        printf("There is no element in the peek!");
    }
    else
    {
        printf("The peek element is : %d", front->data);
    }
}

void isEmpty()
{
    if (front == NULL && rear == NULL)
    {
        printf("Queue is empty!");
    }
    else
    {
        printf("Queue is not empty");
    }
}

int main()
{

    int choice = 0;
    int value = 0;

    while (1)
    {

        printf("\nSelect the operation,\n- Press 1 to Enqueue\n- Press 2 to Dequeue\n- Press 3 to Peek\n- Press 4 to check queue is empty\n- Press 5 to Display the queue\n- Press 6 to Exit\nChoose the Operation : ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
        {
            printf("Enter the value to enqueue : ");
            scanf("%d", &value);
            enqueue(value);
            break;
        }
        case 2:
        {
            dequeue();
            break;
        }
        case 3:
        {
            peek();
            break;
        }
        case 4:
        {
            isEmpty();
            break;
        }
        case 5:
        {
            display();
            break;
        }
        case 6:
        {
            exit(0);
        }
        default:
        {
            printf("Invalid Operation!");
            break;
        }
        }
    }

    return 0;
}
